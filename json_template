    // Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
    // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
    // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
    // used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
    // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
    // Placeholders with the same ids are connected.
    // Example:
{
    "cp": {
        "prefix": "cp",
        "body": [
            "import java.util.*;",
            "import java.io.*;",
            "",
            "public class Main {",
            "    static class FastReader {",
            "        BufferedReader br;",
            "        StringTokenizer st;",
            "        public FastReader() {",
            "            br = new BufferedReader(new InputStreamReader(System.in));",
            "        }",
            "        String next() {",
            "            while (st == null || !st.hasMoreTokens()) {",
            "                try {",
            "                    st = new StringTokenizer(br.readLine());",
            "                } catch (IOException e) {",
            "                    e.printStackTrace();",
            "                }",
            "            }",
            "            return st.nextToken();",
            "        }",
            "        int nextInt() {",
            "            return Integer.parseInt(next());",
            "        }",
            "        long nextLong() {",
            "            return Long.parseLong(next());",
            "        }",
            "        double nextDouble() {",
            "            return Double.parseDouble(next());",
            "        }",
            "        String nextLine() {",
            "            String str = \"\";",
            "            try {",
            "                str = br.readLine().trim();",
            "            } catch (Exception e) {",
            "                e.printStackTrace();",
            "            }",
            "            return str;",
            "        }",
            "    }",
            "",
            "    static class FastWriter {",
            "        private final BufferedWriter bw;",
            "",
            "        public FastWriter() {",
            "            this.bw = new BufferedWriter(new OutputStreamWriter(System.out));",
            "        }",
            "",
            "        public void print(Object object) throws IOException {",
            "            bw.append(\"\" + object);",
            "        }",
            "",
            "        public void println(Object object) throws IOException {",
            "            print(object);",
            "            bw.append(\"\\n\");",
            "        }",
            "",
            "        public void close() throws IOException {",
            "            bw.close();",
            "        }",
            "    }",
            "",
            "    public static void main(String[] args) {",
            "        try {",
            "            FastReader sc = new FastReader();",
            "            FastWriter out = new FastWriter();",
            "            int testCases = sc.nextInt();",
            "            while (testCases-- > 0) {",
            "                solve_ksv(sc, out);",
            "            }",
            "            out.close();",
            "        } catch (Exception e) {",
            "            return;",
            "        }",
            "    }",
            "",
            "    static void solve_ksv(FastReader sc, FastWriter out) throws IOException {",
            "        // Add your logic here",
			"        $0",
            "    }",
            "}"
        ],
        "description": "Java template with FastReader and FastWriter classes, including solve_ksv method."
    }
}
